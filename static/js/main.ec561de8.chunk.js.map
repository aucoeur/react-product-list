{"version":3,"sources":["data.js","components/Product.js","components/ProductList.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["categories","data","map","i","category","setCategories","Set","categoriesUnique","Array","from","sort","categoryCounts","reduce","item","undefined","Object","entries","arr","entry","key","value","push","name","count","description","price","id","className","Product","ProductList","props","currentCategory","product","filter","Button","onClick","event","target","App","useState","setCategory","getCategory","newValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uicAKMA,EAAaC,EAAKC,KAAI,WAAgBC,GACxC,OAD+C,EAAnBC,YAO1BC,EAAgB,IAAIC,IAAIN,GACxBO,EAAmBC,MAAMC,KAAKJ,GAAeK,OAS7CC,EAAiBV,EAAKW,QAAO,SAAEC,EAAF,GAAwB,IAAfT,EAAc,EAAdA,SAMxC,YALuBU,IAAnBD,EAAKT,GACLS,EAAKT,IAAa,EAElBS,EAAKT,GAAY,EAEdS,IACJ,IAoBQZ,GAbMc,OAAOC,QAAQL,GAAgBC,QAAO,SAACK,EAAKC,GAAW,IAAD,cAClDA,EADkD,GAChEC,EADgE,KAC3DC,EAD2D,KAGvE,OADAH,EAAII,KAAK,CAACC,KAAMH,EAAKI,MAAOH,IACrBH,IACR,IAGehB,EAAKC,KAAK,YAA+C,IAA7CoB,EAA4C,EAA5CA,KAAMlB,EAAsC,EAAtCA,SAAUoB,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,MAAe,EAARC,GAC5D,OAAO,yBAAKC,UAAU,WAAf,IAA4BL,EAA5B,IAAqCG,EAArC,IAA+CD,EAA/C,IAA8DpB,MAK5DH,G,MChCA2B,MAdf,YAA0B,IAAR3B,EAAO,EAAPA,KAENqB,EAA2CrB,EAA3CqB,KAAME,EAAqCvB,EAArCuB,YAAaC,EAAwBxB,EAAxBwB,MAAOrB,EAAiBH,EAAjBG,SAAUsB,EAAOzB,EAAPyB,GAC5C,OACI,yBAAKC,UAAU,UAAUR,IAAKO,GAC1B,4BAAMJ,GACN,2BAAKG,GACL,2BAAKD,GACL,+BAASpB,KCQNyB,MAff,SAAqBC,GACjB,MAA8B,QAA1BA,EAAMC,gBACC9B,EAAKC,KAAI,SAAC8B,GACb,OAAO,kBAAC,EAAD,CAAS/B,KAAM+B,EAASb,IAAKa,EAAQN,QAGzCzB,EACFgC,QAAO,SAACD,GACL,OAAOA,EAAQ5B,WAAa0B,EAAMC,mBACrC7B,KAAI,SAAC8B,GACF,OAAO,kBAAC,EAAD,CAAS/B,KAAM+B,EAASb,IAAKa,EAAQN,S,MCI7CQ,MAdf,SAAgBJ,GAAQ,IACZ1B,EAAoC0B,EAApC1B,SAAUgB,EAA0BU,EAA1BV,MAAOe,EAAmBL,EAAnBK,QAASZ,EAAUO,EAAVP,MAIlC,OAAO,4BACCI,UAAS,WACTP,MAAOA,EACPe,QANR,SAAqBC,GACjBD,EAAQC,EAAMC,OAAOjB,SAMZhB,EACD,yBAAKuB,UAAU,SAASJ,KC4BzBe,MAhCf,WAAgB,IAAD,EAC4BC,mBAAS,OADrC,mBACLR,EADK,KACYS,EADZ,KAIb,SAASC,EAAYC,GACnBF,EAAYE,GAOd,IAAM1C,EAAaO,EAAiBL,KAAI,SAACE,EAAUD,GAC/C,IAAMoB,EAAQZ,EAEd,OAAO,kBAAC,EAAD,CAAQP,SAAUA,EAAUsB,GAAItB,EAAUe,IAAKhB,EAAGiB,MAAOhB,EAAUmB,MAAOA,EAAMnB,GAAW+B,QAASM,OAI/G,OACE,6BACE,yBAAKd,UAAU,cACb,4BAAQD,GAAG,MAAMC,UAAU,WAAWP,MAAM,MAAMe,QAdxD,WACEK,EAAY,SAaR,kBACCxC,GAEH,yBAAK2B,UAAU,eACb,kBAAC,EAAD,CAAaI,gBAAiBA,OCxBlBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ec561de8.chunk.js","sourcesContent":["import React from 'react';\nimport data from './data.json' // imports data.json\n\n// Challenge 1 - Get the array of products.\n// Challenge 2 - Get a list of all categories.\nconst categories = data.map(( { category }, i ) => {\n    return (\n        category\n    )\n})\n\n// Challenge 3 - Make the categories list a list of unique values.\nconst setCategories = new Set(categories) \nconst categoriesUnique = Array.from(setCategories).sort() // Make an array from set, sort alphabetically\n\n// alt way to copy & sort, since sort transforms OG data\n    // const copy = [...categoriesUnique]\n    // copy.sort()\n\n// console.log(categoriesUnique)\n\n// Challenge 4 - Make an Object whose keys are the names of categories and whose values are the number of times that category appears in the data.\nconst categoryCounts = data.reduce(( item, {category}) => {\n    if (item[category] !== undefined) {\n        item[category] += 1\n    } else {\n        item[category] = 1\n    }\n    return item\n    }, {} // set init value to {} \n    )\n    // console.log(categoryCounts)\n\n// Challenge 5 - Use Reduce to make an array of objects that have a name and a count. This array will be similar to Challenge 4 but in a different format. For this list all of the names should be unique and each should only appear once!\n\n// can we do like this??\nconst objInventory = Object.entries(categoryCounts).reduce((arr, entry) => {\n    const [key, value] = entry\n    arr.push({name: key, count: value})\n    return arr\n}, [])\n// console.log(objInventory)\n\nconst inventory = data.map( ({name, category, description, price, id}) => {\n      return <div className=\"product\"> { name } { price } { description} { category}</div>\n    }\n  )\n\n// Challenge 6 - Export all of the data you have collected.\nexport default data;\nexport { categoriesUnique, categoryCounts, objInventory, inventory }","import React from 'react';\nimport './Product.css';\n\nfunction Product({data}) {\n    // const {data} = props\n    const { name, description, price, category, id } = data\n    return (\n        <div className=\"Product\" key={id}>\n            <h2>{ name }</h2>\n            <p>{ price }</p>\n            <p>{ description }</p>\n            <small>{ category }</small>\n\n        </div>\n    )\n}\n\nexport default Product;","import React from 'react';\nimport data from '../data';\nimport Product from './Product';\n\nfunction ProductList(props) {\n    if (props.currentCategory === 'All') {\n        return data.map((product) => {\n            return <Product data={product} key={product.id}/>\n        })\n    } else {\n        return data\n            .filter((product) => {\n                return product.category === props.currentCategory })\n            .map((product) => {\n                return <Product data={product} key={product.id}/>\n            })\n    }\n}\n\nexport default ProductList;","import React from 'react';\nimport './Button.css';\n// import { categoriesUnique } from '../data';\n\nfunction Button(props) {\n    const { category, value, onClick, count } = props\n    function getCategory(event) {\n        onClick(event.target.value);\n    }\n    return <button \n            className={`category`} \n            value={value}\n            onClick={getCategory}> \n                {category}  \n                <div className=\"badge\">{count}</div>\n            </button>\n}\n\nexport default Button;","import React, {useState} from 'react';\nimport './App.css';\n\nimport ProductList from './components/ProductList';\nimport Button from './components/Button'\n\n// Challenge 7 - Import your exported data into the App component. \nimport { categoryCounts, categoriesUnique } from './data';\n\n\nfunction App() {\n  const [ currentCategory, setCategory ] = useState('All')\n  // passes currentCategory state as prop to ProductList to conditionally use map/filter\n\n  function getCategory(newValue) {\n    setCategory(newValue);\n  }\n\n  function resetState() {\n    setCategory('All');\n  }\n\n  const categories = categoriesUnique.map((category, i) => {\n      const count = categoryCounts\n      // console.log(count[category])\n      return <Button category={category} id={category} key={i} value={category} count={count[category]} onClick={getCategory}/>\n    }\n  )\n\n  return (\n    <div>\n      <div className='categories'>\n        <button id=\"All\" className=\"category\" value=\"All\" onClick={resetState}>ALL CATEGORIES</button>\n        {categories}\n      </div>\n      <div className=\"ProductList\">\n        <ProductList currentCategory={currentCategory} />  \n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}